{"version":3,"file":"static/js/736.44fdcea7.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAW,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAGhC,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,GAAAC,IAAAA,MAHM,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACcZ,EAAAA,EAAAA,IAAU,4BAADa,OAA6BZ,IAAW,KAAD,EAAzD,OAAJQ,EAAIC,EAAAI,KAAAJ,EAAAK,OAAA,SACHN,GAAI,wBAAAC,EAAAM,OAAA,GAAAR,EAAA,MACZJ,MAAA,KAAAC,UAAA,CAEM,SAAeY,EAAmBC,GAAA,OAAAC,EAAAf,MAAC,KAADC,UAAA,CAKxC,SAAAc,IAAA,OAAAA,GAAAb,EAAAA,EAAAA,GAAAC,IAAAA,MALM,SAAAa,EAAmCC,GAAM,IAAAZ,EAAA,OAAAF,IAAAA,MAAA,SAAAe,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,cAAAU,EAAAV,KAAA,EAC3BZ,EAAAA,EAAAA,IAAU,wBAADa,OACFZ,EAAO,WAAAY,OAAUQ,IACzC,KAAD,EAFS,OAAJZ,EAAIa,EAAAR,KAAAQ,EAAAP,OAAA,SAGHN,GAAI,wBAAAa,EAAAN,OAAA,GAAAI,EAAA,MACZhB,MAAA,KAAAC,UAAA,CAEM,SAAekB,EAAeC,GAAA,OAAAC,EAAArB,MAAC,KAADC,UAAA,CAGpC,SAAAoB,IAAA,OAAAA,GAAAnB,EAAAA,EAAAA,GAAAC,IAAAA,MAHM,SAAAmB,EAA+BC,GAAE,IAAAlB,EAAA,OAAAF,IAAAA,MAAA,SAAAqB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cAAAgB,EAAAhB,KAAA,EACnBZ,EAAAA,EAAAA,IAAU,SAADa,OAAUc,EAAE,aAAAd,OAAYZ,IAAW,KAAD,EAApD,OAAJQ,EAAImB,EAAAd,KAAAc,EAAAb,OAAA,SACHN,GAAI,wBAAAmB,EAAAZ,OAAA,GAAAU,EAAA,MACZtB,MAAA,KAAAC,UAAA,CAEM,SAAewB,EAAeC,GAAA,OAAAC,EAAA3B,MAAC,KAADC,UAAA,CAGpC,SAAA0B,IAAA,OAAAA,GAAAzB,EAAAA,EAAAA,GAAAC,IAAAA,MAHM,SAAAyB,EAA+BL,GAAE,IAAAlB,EAAA,OAAAF,IAAAA,MAAA,SAAA0B,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAAAqB,EAAArB,KAAA,EACnBZ,EAAAA,EAAAA,IAAU,SAADa,OAAUc,EAAE,qBAAAd,OAAoBZ,IAAW,KAAD,EAA5D,OAAJQ,EAAIwB,EAAAnB,KAAAmB,EAAAlB,OAAA,SACHN,GAAI,wBAAAwB,EAAAjB,OAAA,GAAAgB,EAAA,MACZ5B,MAAA,KAAAC,UAAA,CAEM,SAAe6B,EAAeC,GAAA,OAAAC,EAAAhC,MAAC,KAADC,UAAA,CAGpC,SAAA+B,IAAA,OAAAA,GAAA9B,EAAAA,EAAAA,GAAAC,IAAAA,MAHM,SAAA8B,EAA+BV,GAAE,IAAAlB,EAAA,OAAAF,IAAAA,MAAA,SAAA+B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAA1B,KAAA,EACnBZ,EAAAA,EAAAA,IAAU,SAADa,OAAUc,EAAE,qBAAAd,OAAoBZ,IAAW,KAAD,EAA5D,OAAJQ,EAAI6B,EAAAxB,KAAAwB,EAAAvB,OAAA,SACHN,GAAI,wBAAA6B,EAAAtB,OAAA,GAAAqB,EAAA,MACZjC,MAAA,KAAAC,UAAA,C,+IC5BYkC,GAAWC,E,OAAAA,IAAO,MAAPA,EAAc,WACpC,MAAO,CACL,OAAQ,CACNC,QAAS,OACTC,UAAW,OACXC,SAAU,OACVC,IAAK,OACLC,QAAS,OAET,OAAQ,CACNC,MAAO,SAIf,I,SCgDA,EA1Da,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAERE,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAE9BG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAA3D,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAA0D,EAAAzD,EAAA0D,EAAA,OAAA5D,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGD,OAHCF,EAAAC,KAAA,EAEdmD,GAAa,GACbJ,EAAS,IAAIhD,EAAAE,KAAA,GACUiB,EAAAA,EAAAA,IAAgBkB,GAAS,KAAD,EAAAmB,EAAAxD,EAAAI,KAAvCL,EAAIyD,EAAJzD,KACR6C,EAAQ7C,GAAMC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA0D,GAAA1D,EAAA,SACLyD,EAAOzD,EAAA0D,GAAPD,QACTT,EAASS,GAAS,QAEE,OAFFzD,EAAAC,KAAA,GAElBmD,GAAa,GAAOpD,EAAA2D,OAAA,6BAAA3D,EAAAM,OAAA,GAAAR,EAAA,yBAEvB,kBAXc,OAAAyD,EAAA7D,MAAA,KAAAC,UAAA,KAYf2D,GACF,GAAG,CAACjB,IAKJ,OACEuB,EAAAA,EAAAA,MAAC/B,EAAQ,CAAAgC,SAAA,CACNd,IAASe,EAAAA,EAAAA,KAAA,MAAAD,SAAKd,IACdI,IAAaW,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACpBpB,IACEA,EAAKA,KAAKqB,QACTF,EAAAA,EAAAA,KAAA,MAAAD,SACGlB,EAAKA,KAAKsB,KAAI,SAAAC,GAAM,OACnBN,EAAAA,EAAAA,MAAA,MAAIO,UAAU,OAAMN,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OACEK,UAAU,eACVC,IACEF,EAAOG,aAAY,mCAAAlE,OACoB+D,EAAOG,cAf9D,sGAkBcC,IAAK3B,EAAKA,KAAK4B,KACfnC,MAAM,WAERwB,EAAAA,EAAAA,MAAA,OAAKO,UAAU,YAAWN,SAAA,EACxBC,EAAAA,EAAAA,KAAA,KAAGK,UAAU,YAAWN,SAAEK,EAAOK,QACjCX,EAAAA,EAAAA,MAAA,KAAGO,UAAU,YAAWN,SAAA,CAAC,cAAYK,EAAOM,kBAbtBN,EAAOjD,GAe5B,OAIT6C,EAAAA,EAAAA,KAAA,KAAAD,SAAG,8CAIb,C","sources":["api/movies.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '109bcd47cacae0c8d94626fc0a0277fa';\n\nexport async function getTrending() {\n  const data = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n  return data;\n}\n\nexport async function getMoviesFromSearch(search) {\n  const data = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${search}`\n  );\n  return data;\n}\n\nexport async function getMovieDetails(id) {\n  const data = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return data;\n}\n\nexport async function getMovieCredits(id) {\n  const data = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n}\n\nexport async function getMovieReviews(id) {\n  const data = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n}\n","import { styled } from 'styled-components';\n\nexport const CastWrap = styled('div')(() => {\n  return {\n    '& ul': {\n      display: 'flex',\n      listStyle: 'none',\n      flexWrap: 'wrap',\n      gap: '15px',\n      padding: '20px',\n\n      '& li': {\n        width: '30vh',\n      },\n    },\n  };\n});\n","import { getMovieCredits } from 'api/movies';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastWrap } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setIsLoading(true);\n        setError('');\n        const { data } = await getMovieCredits(movieId);\n        setCast(data);\n      } catch ({ message }) {\n        setError(message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  const defaultImg =\n    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSRULocmP6cP6JYFZmzMlbVHbWwu-oAdX5NaQ&usqp=CAU';\n\n  return (\n    <CastWrap>\n      {error && <h1>{error}</h1>}\n      {isLoading && <Loader />}\n      {cast &&\n        (cast.cast.length ? (\n          <ul>\n            {cast.cast.map(person => (\n              <li className=\"card\" key={person.id}>\n                <img\n                  className=\"card-img-top\"\n                  src={\n                    person.profile_path\n                      ? `https://image.tmdb.org/t/p/w200/${person.profile_path}`\n                      : defaultImg\n                  }\n                  alt={cast.cast.name}\n                  width=\"200px\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">{person.name}</p>\n                  <p className=\"card-text\">Character: {person.character}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>We don't have any cast for this movie.</p>\n        ))}\n    </CastWrap>\n  );\n};\nexport default Cast;\n"],"names":["axios","API_KEY","getTrending","_getTrending","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","concat","sent","abrupt","stop","getMoviesFromSearch","_x","_getMoviesFromSearch","_callee2","search","_context2","getMovieDetails","_x2","_getMovieDetails","_callee3","id","_context3","getMovieCredits","_x3","_getMovieCredits","_callee4","_context4","getMovieReviews","_x4","_getMovieReviews","_callee5","_context5","CastWrap","styled","display","listStyle","flexWrap","gap","padding","width","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","useEffect","fetchCast","_ref","_yield$getMovieCredit","message","t0","finish","_jsxs","children","_jsx","Loader","length","map","person","className","src","profile_path","alt","name","character"],"sourceRoot":""}